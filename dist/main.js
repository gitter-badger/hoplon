// Generated by LiveScript 1.6.0
(function(){
  var reg, com, already_created, verify, modflag, print, main, l, z, R, uic, init, settle, tightloop, looper, handle, genfun, props, hoplon;
  reg = require("./registry");
  require("./print");
  require("./verify");
  com = reg.com, already_created = reg.already_created, verify = reg.verify, modflag = reg.modflag, print = reg.print, main = reg.main;
  l = com.l, z = com.z, R = com.R, uic = com.uic;
  init = {
    str: [],
    fns: [],
    def: null,
    fault: false,
    immutable: false,
    mutelog: false
  };
  settle = function(F, A){
    var ftype, f;
    ftype = F[0], f = F[1];
    switch (ftype) {
    case 'f':
      return f.apply(null, A);
    case 's':
      return f;
    }
  };
  tightloop = function(state){
    return function(){
      var arglen, i$, ref$, len$, ref1$, fname, data, J, I, ret, validator, fin, spans, F, ltype, lens, has, def;
      arglen = arguments.length;
      for (i$ = 0, len$ = (ref$ = state.fns).length; i$ < len$; ++i$) {
        ref1$ = ref$[i$], fname = ref1$.fname, data = ref1$.data;
        switch (fname) {
        case 'ma':
          J = data.length;
          I = 0;
          switch (data.length) {
          case 1:
            ret = settle(data[0], arguments);
            if (ret) {
              return ret;
            }
            break;
          default:
            while (I < J) {
              ret = settle(data[I], arguments);
              if (ret) {
                return ret;
              }
              I += 1;
            }
          }
          break;
        case 'wh':
          validator = data[0], fin = data[1];
          if (settle(validator, arguments)) {
            return settle(fin, arguments);
          }
          break;
        case 'whn':
          validator = data[0], fin = data[1];
          if (!settle(validator, arguments)) {
            return settle(fin, arguments);
          }
          break;
        case 'ar':
          spans = data[0], F = data[1];
          ltype = spans[0], lens = spans[1];
          switch (ltype) {
          case 'n':
            if (lens === arglen) {
              return settle(F, arguments);
            }
            break;
          case 'a':
            J = data.length;
            I = 0;
            while (I < J) {
              if (I === arglen) {
                return settle(F, arguments);
              }
              I += 1;
            }
          }
          break;
        case 'arn':
          spans = data[0], fin = data[1];
          ltype = spans[0], lens = spans[1];
          switch (ltype) {
          case 'n':
            if (!(lens === arglen)) {
              return settle(fin, arguments);
            }
            break;
          case 'a':
            J = lens.length;
            I = 0;
            has = false;
            while (I < J) {
              if (lens[I] === arglen) {
                has = true;
              }
              I += 1;
            }
            if (!has) {
              return settle(fin, arguments);
            }
          }
          break;
        case 'arwh':
          spans = data[0], validator = data[1], fin = data[2];
          ltype = spans[0], lens = spans[1];
          switch (ltype) {
          case 'n':
            if (lens === arglen) {
              if (settle(validator, arguments)) {
                return settle(fin, arguments);
              }
            }
            break;
          case 'a':
            J = lens.length;
            I = 0;
            while (I < J) {
              if (lens[I] === arglen) {
                if (settle(validator, arguments)) {
                  return settle(fin, arguments);
                }
              }
              I += 1;
            }
          }
          break;
        case 'arwhn':
          spans = data[0], validator = data[1], fin = data[2];
          ltype = spans[0], lens = spans[1];
          switch (ltype) {
          case 'n':
            if (lens === arglen) {
              if (!settle(validator, arguments)) {
                return settle(fin, arguments);
              }
            }
            break;
          case 'a':
            J = lens.length;
            I = 0;
            while (I < J) {
              if (lens[I] === arglen) {
                if (!settle(validator, arguments)) {
                  return settle(fin, arguments);
                }
              }
              I += 1;
            }
          }
          break;
        case 'arnwh':
          spans = data[0], validator = data[1], fin = data[2];
          ltype = spans[0], lens = spans[1];
          switch (ltype) {
          case 'n':
            if (!(lens === arglen)) {
              if (settle(validator, arguments)) {
                return settle(fin, arguments);
              }
            }
            break;
          case 'a':
            J = lens.length;
            I = 0;
            has = false;
            while (I < J) {
              if (lens[I] === arglen) {
                has = true;
              }
              I += 1;
            }
            if (!has) {
              if (settle(validator, arguments)) {
                return settle(fin, arguments);
              }
            }
          }
          break;
        case 'arnwhn':
          spans = data[0], validator = data[1], fin = data[2];
          ltype = spans[0], lens = spans[1];
          switch (ltype) {
          case 'n':
            if (!(lens === arglen)) {
              if (!settle(validator, arguments)) {
                return settle(fin, arguments);
              }
            }
            break;
          case 'a':
            J = lens.length;
            I = 0;
            has = false;
            while (I < J) {
              if (lens[I] === arglen) {
                has = true;
              }
              I += 1;
            }
            if (!has) {
              if (!settle(validator, arguments)) {
                return settle(fin, arguments);
              }
            }
          }
        }
      }
      def = state.def;
      if (def) {
        return settle(def, arguments);
      }
    };
  };
  looper = function(state){
    var instance;
    instance = Object.create(main);
    instance[modflag] = state;
    return instance;
  };
  handle = {};
  handle.fault = function(self, data, fname){
    var state, FT, neo;
    state = self[modflag];
    FT = ['input', fname, data];
    print.route([FT, state]);
    neo = Object.assign({}, state, {
      fault: FT
    });
    return looper(neo);
  };
  handle.ok = function(self, data, fname){
    var state, fns, neo;
    state = self[modflag];
    if (state.immutable || state.str.length === 0) {
      fns = state.fns.concat({
        fname: fname,
        data: data
      });
      neo = Object.assign({}, state, {
        fns: fns,
        str: state.str.concat(fname)
      });
      return looper(neo);
    } else {
      state.fns.push({
        fname: fname,
        data: data
      });
      state.str.push(fname);
      neo = state;
      return self;
    }
  };
  handle.def = {};
  handle.def.ok = function(self, data){
    var state, neo, F;
    state = self[modflag];
    neo = Object.assign({}, state, {
      def: data,
      str: state.str.concat('def')
    });
    F = tightloop(neo);
    F[uic] = print.log.wrap(neo);
    return F;
  };
  handle.def.fault = handle.fault;
  genfun = function(vfun, fname){
    return function(){
      var state, ref$, zone, data;
      state = this[modflag];
      if (state.fault) {
        return this;
      }
      ref$ = vfun(arguments), zone = ref$[0], data = ref$[1];
      return handle[zone](this, data, fname);
    };
  };
  main[uic] = print.log.proto;
  main.def = function(){
    var state, ref$, zone, data;
    state = this[modflag];
    if (state.fault) {
      return this;
    }
    ref$ = verify.def(arguments), zone = ref$[0], data = ref$[1];
    return handle.def[zone](this, data, 'def');
  };
  props = ['ma', 'wh', 'ar', 'whn', 'arn', 'arwh', 'arnwh', 'arwhn', 'arnwhn'];
  R.reduce(function(ob, prop){
    ob[prop] = genfun(verify.getvfun(prop), prop);
    return ob;
  }, main, props);
  hoplon = looper(init);
  hoplon.immutable = looper(Object.assign({}, init, {
    immutable: true
  }));
  hoplon.mutelog = looper(Object.assign({}, init, {
    mutelog: true
  }));
  hoplon.immutable.mutelog = looper(Object.assign({}, init, {
    immutable: true,
    mutelog: true
  }));
  hoplon.mutelog.immutable = looper(Object.assign({}, init, {
    immutable: true,
    mutelog: true
  }));
  Object.freeze(hoplon);
  reg.hoplon = hoplon;
  module.exports = hoplon;
}).call(this);
